<!DOCTYPE html>
<html lang="en" >
<head>
    <meta charset="UTF-8">
    <title>MovingFeature Server</title>
    <link rel="dns-prefetch" href="//unpkg.com" />
    <link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
    <link rel="stylesheet" href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css">
    <script
            src="https://code.jquery.com/jquery-3.7.0.min.js"
            integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
            crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js" defer></script>
    <style>
        [x-cloak] {
            display: none;
        }

        /* input:checked + svg {
            display: block;
        } */
        [type="checkbox"] {
            box-sizing: border-box;
            padding: 0;
        }

        .form-checkbox {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            -webkit-print-color-adjust: exact;
            color-adjust: exact;
            display: inline-block;
            vertical-align: middle;
            background-origin: border-box;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            flex-shrink: 0;
            color: currentColor;
            background-color: #fff;
            border-color: #e2e8f0;
            border-width: 1px;
            border-radius: 0.25rem;
            height: 1.2em;
            width: 1.2em;
        }

        .form-checkbox:checked {
            background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M5.707 7.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0-1.414-1.414L7 8.586 5.707 7.293z'/%3e%3c/svg%3e");
            border-color: transparent;
            background-color: currentColor;
            background-size: 100% 100%;
            background-position: center;
            background-repeat: no-repeat;
        }
    </style>

</head>
<body>
<!-- partial:index.partial.html -->
<body class="antialiased sans-serif bg-gray-200">
<div class="container mx-auto py-6 px-4" x-data="datatables()" x-cloak>

    <h1 class="text-3xl py-4 border-b mb-10">Server Data Table</h1>

    <div x-show="selectedRows.length" class="bg-teal-200 fixed top-0 left-0 right-0 z-40 w-full shadow">
        <div class="container mx-auto px-4 py-4">
            <div class="flex md:items-center">
                <div class="mr-4 flex-shrink-0">
                    <svg class="h-8 w-8 text-teal-600"  viewBox="0 0 20 20" fill="currentColor">  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/></svg>
                </div>
                <div x-html="selectedRows.length + ' rows are selected'" class="text-teal-800 text-lg"></div>
            </div>
        </div>
    </div>
    <div x-show="selectedDataset.length" class="bg-teal-200 fixed top-0 left-0 right-0 z-40 w-full shadow">
        <div class="container mx-auto px-4 py-4">
            <div class="flex md:items-center">
                <div class="mr-4 flex-shrink-0">
                    <svg class="h-8 w-8 text-teal-600"  viewBox="0 0 20 20" fill="currentColor">  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/></svg>
                </div>
                <div x-html="selectedDataset.length + ' rows are selected to send'" class="text-teal-800 text-lg"></div>
            </div>
        </div>
    </div>
    <div class="mb-4 flex justify-between items-center">
        <div>
            <button @click="fetchData" class="rounded-lg inline-flex items-center bg-white hover:text-blue-500 focus:outline-none focus:shadow-outline text-gray-500 font-semibold py-2 px-2 md:px-4">
                Get MovingFeatureCollection
            </button>
            <button @click="sendData" class="rounded-lg inline-flex items-center bg-white hover:text-blue-500 focus:outline-none focus:shadow-outline text-gray-500 font-semibold py-2 px-2 md:px-4">
                Send MovingFeatureCollection
            </button>
        </div>
    </div>
    <div class="mb-4 flex justify-between items-center">
        <div class="flex-1 pr-4">
            <div class="relative md:w-1/4">
                <input type="search" x-model="searchTerm" @input="search"
                       class="w-full pl-10 pr-4 py-2 rounded-lg shadow focus:outline-none focus:shadow-outline text-gray-600 font-medium"
                       placeholder="Search...">
                <div class="absolute top-0 left-0 inline-flex items-center p-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-gray-400" viewBox="0 0 24 24"
                         stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
                         stroke-linejoin="round">
                        <rect x="0" y="0" width="24" height="24" stroke="none"></rect>
                        <circle cx="10" cy="10" r="7" />
                        <line x1="21" y1="21" x2="15" y2="15" />
                    </svg>
                </div>
            </div>
        </div>
        <div>
            <div class="shadow rounded-lg flex">
                <div class="relative">
                    <button @click.prevent="open = !open"
                            class="rounded-lg inline-flex items-center bg-white hover:text-blue-500 focus:outline-none focus:shadow-outline text-gray-500 font-semibold py-2 px-2 md:px-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 md:hidden" viewBox="0 0 24 24"
                             stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
                             stroke-linejoin="round">
                            <rect x="0" y="0" width="24" height="24" stroke="none"></rect>
                            <path
                                    d="M5.5 5h13a1 1 0 0 1 0.5 1.5L14 12L14 19L10 16L10 12L5 6.5a1 1 0 0 1 0.5 -1.5" />
                        </svg>
                        <span class="hidden md:block">Display</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 ml-1" width="24" height="24"
                             viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                             stroke-linecap="round" stroke-linejoin="round">
                            <rect x="0" y="0" width="24" height="24" stroke="none"></rect>
                            <polyline points="6 9 12 15 18 9" />
                        </svg>
                    </button>

                    <div x-show="open" @click.away="open = false"
                         class="z-40 absolute top-0 right-0 w-40 bg-white rounded-lg shadow-lg mt-12 -mr-1 block py-1 overflow-hidden">
                        <template x-for="heading in headings">
                            <label
                                    class="flex justify-start items-center text-truncate hover:bg-gray-100 px-4 py-2">
                                <div class="text-teal-600 mr-3">
                                    <input type="checkbox" class="form-checkbox focus:outline-none focus:shadow-outline" checked @click="toggleColumn(heading.key)">
                                </div>
                                <div class="select-none text-gray-700" x-text="heading.value"></div>
                            </label>
                        </template>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="overflow-x-auto bg-white rounded-lg shadow overflow-y-auto relative"
         style="height: 405px;">
        <table class="border-collapse table-auto w-full whitespace-no-wrap bg-white table-striped relative">
            <thead>
            <tr class="text-left">
                <th class="py-2 px-3 sticky top-0 border-b border-gray-200 bg-gray-100">
                    <label
                            class="text-teal-500 inline-flex justify-between items-center hover:bg-gray-200 px-2 py-2 rounded-lg cursor-pointer">
                        <input type="checkbox" class="form-checkbox focus:outline-none focus:shadow-outline" @click="selectAllCheckbox($event);">
                    </label>
                </th>
                <template x-for="heading in headings">
                    <th class="bg-gray-100 sticky top-0 border-b border-gray-200 px-6 py-2 text-gray-600 font-bold tracking-wider uppercase text-xs"
                        x-text="heading.value" :x-ref="heading.key" :class="{ [heading.key]: true }"></th>
                </template>
            </tr>
            </thead>
            <tbody>
            <template x-for="mfc in mfcs" :key="mfc.mfc_idx">
                <tr>
                    <td class="border-dashed border-t border-gray-200 px-3">
                        <label
                                class="text-teal-500 inline-flex justify-between items-center hover:bg-gray-200 px-2 py-2 rounded-lg cursor-pointer">
                            <input type="checkbox" class="form-checkbox rowCheckbox focus:outline-none focus:shadow-outline" :name="mfc.mfc_idx"
                                   @click="getRowDetail($event, mfc.mfc_idx)">
                        </label>
                    </td>
                    <td class="border-dashed border-t border-gray-200 mfc_idx">
                        <span class="text-gray-700 px-6 py-3 flex items-center" x-text="mfc.mfc_idx"></span>
                    </td>
                    <td class="border-dashed border-t border-gray-200 mfc_id">
                        <span class="text-gray-700 px-6 py-3 flex items-center" x-text="mfc.mfc_id"></span>
                    </td>
                    <td class="border-dashed border-t border-gray-200 mfc_title">
                        <span class="text-gray-700 px-6 py-3 flex items-center" x-text="mfc.mfc_title"></span>
                    </td>
                    <td class="border-dashed border-t border-gray-200 mfc_bbox">
								<span class="text-gray-700 px-6 py-3 flex items-center"
                                      x-text="mfc.mfc_bbox"></span>
                    </td>
                    <td class="border-dashed border-t border-gray-200 mfc_time">
								<span class="text-gray-700 px-6 py-3 flex items-center"
                                      x-text="mfc.mfc_time"></span>
                    </td>
                    <td class="border-dashed border-t border-gray-200 mfc_limit">
								<span class="text-gray-700 px-6 py-3 flex items-center"
                                      x-text="mfc.mfc_limit"></span>
                    </td>
                </tr>
            </template>
            </tbody>
        </table>
    </div>
</div>

<script>
    var localServerURL = '<%= localServerURL %>';
    var limitMFC = '<%= limitMFC %>';
    function datatables() {
        return {
            headings: [
                {
                    'key': 'mfc_idx',
                    'value': 'Index'
                },
                {
                    'key': 'mfc_id',
                    'value': 'MovingFeature Collection ID'
                },
                {
                    'key': 'mfc_title',
                    'value': 'MovingFeature Collection Title'
                },
                {
                    'key': 'mfc_bbox',
                    'value': 'BBOX'
                },
                {
                    'key': 'mfc_time',
                    'value': 'Time'
                },
                {
                    'key': 'mfc_limit',
                    'value': 'Limit'
                }
            ],
            mfcs: [],
            originalMfcs: [],
            defaultURL: localServerURL,
            nextURL: "",
            selectedRows: [],
            selectedDataset: [],
            open: false,
            searchTerm: '',
            search(){
                let term = this.searchTerm.toLowerCase();
                if (term === '') {
                    this.mfcs = this.originalMfcs; // Restore original data when search term is empty
                } else {
                    this.mfcs = this.originalMfcs.filter(mfc => {
                        return mfc.mfc_id.toLowerCase().includes(term) ||
                            mfc.mfc_title.toLowerCase().includes(term);
                    });
                }
            },
            toggleColumn(key) {
                // Note: All td must have the same class name as the headings key!
                let columns = document.querySelectorAll('.' + key);

                if (this.$refs[key].classList.contains('hidden') && this.$refs[key].classList.contains(key)) {
                    columns.forEach(column => {
                        column.classList.remove('hidden');
                    });
                } else {
                    columns.forEach(column => {
                        column.classList.add('hidden');
                    });
                }
            },

            getRowDetail($event, id) {

                let rows = this.selectedRows;

                if (rows.includes(id)) {
                    let index = rows.indexOf(id);
                    rows.splice(index, 1);

                } else {
                    rows.push(id);

                }
            },

            selectAllCheckbox($event) {
                let columns = document.querySelectorAll('.rowCheckbox');

                this.selectedRows = [];

                if ($event.target.checked == true) {
                    columns.forEach(column => {
                        column.checked = true
                        this.selectedRows.push(parseInt(column.name))
                    });
                } else {
                    columns.forEach(column => {
                        column.checked = false
                    });
                    this.selectedRows = [];
                }
            },
            clearTable() {
                this.mfcs = []; // Clear the user data array
                this.originalMfcs = []; // Clear the user data array
                this.selectedRows = []; // Clear selected rows
                this.selectedDataset = [];
                this.searchTerm = "";
            },
            fetchData() {
                // Replace 'your-server-url' with the actual URL to fetch data from
                let searchParma = 1;
                this.clearTable();
                fetch(this.defaultURL+"/collections?f=json", {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                }).then(response => response.json())
                    .then(data => {
                        let MFCollections = data['collections']
                        console.log(MFCollections)
                        for(let each_i = 0; each_i < MFCollections.length; each_i += 1){
                            let eachMFCollection = MFCollections[each_i]
                            // console.log(eachFeature.id, eachFeature.itemType, eachFeature['extent']['spatial']['bbox'], eachFeature['extent']['temporal']['interval'])
                            let F_number = each_i
                            let F_id = (eachMFCollection.id !== undefined) ? eachMFCollection.id : each_i
                            let F_type = (eachMFCollection.itemType !== undefined) ? eachMFCollection.itemType : null
                            let F_title = eachMFCollection.title
                            let F_p_bbox = (eachMFCollection['extent']['spatial']['bbox'] !== undefined) ? eachMFCollection['extent']['spatial']['bbox'] : null
                            let F_p_time = (eachMFCollection['extent']['temporal']['interval'] !== undefined) ? eachMFCollection['extent']['temporal']['interval'] : null
                            // let F_p_time = (eachMFCollection['temporal']['interval'] !== undefined) ? eachMFCollection['temporal']['interval'] : null
                            this.mfcs.push({
                                mfc_idx: F_number,
                                mfc_id: F_id,
                                // mfc_type: F_type,
                                mfc_title: F_title,
                                mfc_bbox: F_p_bbox,
                                mfc_time: F_p_time,
                                mfc_limit: limitMFC
                            })
                            this.originalMfcs.push(
                                {
                                    mfc_idx: F_number,
                                    mfc_id: F_id,
                                    // mfc_type: F_type,
                                    mfc_title: F_title,
                                    mfc_bbox: F_p_bbox,
                                    mfc_time: F_p_time,
                                    mfc_limit: limitMFC
                                }
                            )
                        }
                    })
            },
            sendData() {
                if (this.selectedRows.length === 0) {
                    alert('No rows selected.');
                    return;
                }
                this.selectedDataset = this.mfcs.filter(mfc => this.selectedRows.includes(mfc.mfc_idx))
                let data = {
                    mfc_list: JSON.stringify(this.selectedDataset)
                }
                $.ajax({
                    url: '/selectedMFC',
                    type: 'POST',
                    data: data,
                    async: false,
                    success: function(data){
                        if (data.ok){
                            location.href = '/';
                        }
                    }
                });

                // sessionStorage.foo = JSON.stringify(this.selectedDataset)
            }
        }
    }
    function OnlyNumber(obj, chkint){
        if(isNaN(obj.value)){
            alert("Only numbers can be entered");
            obj.value="";
            obj.focus();
            return false;
        }
        else if(obj.value > Number(chkint) || obj.value == 0) {

            alert("Only numbers below "+chkint+" are allowed.");
            obj.value="";
            obj.focus();
            return false;

        }

        return true;

    }

</script>
</body>
<!-- partial -->

</body>
</html>
